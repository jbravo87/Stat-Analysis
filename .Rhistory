# First want to upload a clean up the data a bit.
raw_data <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/tenth-circuit/tenth-circuit.csv", header = TRUE, stringsAsFactors = FALSE)
# checking the various columns in raw data.
names(raw_data)
# Next objective is to create a data frame with the three columns of interest.
# Vote1, Judge1, and Category
# For the binary 0/1 (conservative/liberal) dealing with nominal categorical variables.
y1 <- factor(x2$Vote1, labels = c("Conservative", "Liberal"))
# First filter will be by immigration in the category column.
x1 <- data.frame( raw_data )
x2 <- x1[x1$Category == "Immigration",]
# Next objective is to create a data frame with the three columns of interest.
# Vote1, Judge1, and Category
# For the binary 0/1 (conservative/liberal) dealing with nominal categorical variables.
y1 <- factor(x2$Vote1, labels = c("Conservative", "Liberal"))
y1
y2 <- as.factor(x2$Judge1)
y2
# Following line gives all the names of the judges.
levels(y2)
# Now to unclass and assign each judge theor own respective number.
y3 <- unclass(y2)
print(y3)
print(y3)
typeof(y3)
y4 <- as.factor(y2)
y4
typeof(y4)
# Want data frame with just judge and vote
trainingdata_2 <- data.frame( y1, y2 )
# Now to code the model using the two categorical variables.
# logistical regression aka logit
logit.model <- glm( y1 ~ y2, data = training_data, family = binomial )
# GOing to use some libraries for further analysis
library(dplyr)
a1 <- trainingdata_2 %>% count("Liberal")
# Create a final data frame to create model.
training_data = data.frame(x2$Date, y1, y2)
# Want data frame with just judge and vote
trainingdata_2 <- data.frame( y1, y2 )
# Now to code the model using the two categorical variables.
# logistical regression aka logit
logit.model <- glm( y1 ~ y2, data = training_data, family = binomial )
# summary statistics
summary( logit.model )
# Will access just the coefficients for this fitted model.
coef( logit.model )
# More summary data.
summary(logit.model)$coef
summary(logit.model)$coef[ , 4 ]
# Function to predict the probability that the
# judge will vote liberal given predictor values.
model.probs <- predict(logit.model, type = "response")
model.probs
# To get the different categorical values.
unique(y2)
# Misc code
sum(with(trainingdata_2, y1=="Liberal"))
sum(with(trainingdata_2, y1=="Conservative"))
# Will create two different data sets for liberal vs conservative votes
conservative_votes <- filter( trainingdata_2, y1 == "Conservative" )
# Need the numeric labels for the second column
judges_numeric <- as.numeric( trainingdata_2$y2 )
# data frame with new two columns
newdf3 <- data.frame(y1, judges_numeric)
summarydata <- newdf3 %>%
group_by(judges_numeric) %>%
summarise(COunt = n())
summarydata2 <- conservative_votes %>%
group_by(y2) %>%
summarise(Count = n())
typeof(summarydata2)
# Another approach to count number of occurences in a column
newdf4 <- table( conservative_votes$y2 )
some_table <- conservative_votes %>% count(y2)
# Will try and get it in one pipe
some_table %>% pull(n) %>% hist()
# experimenting with some plotting
library(ggplot2)
#qplot( some_table, geom = "histogram" )
# Line above doesn't work
hist(some_table$n)
plot(some_table)
# Attempting some intial plotting.
plot(model.probs)
plot(logit.model)
install.packages("ggstatsplot")
library(ggstatsplot)
ggstatsplot::ggcoefstats(
x = logit.model,
statistic = 'z',
exponentiate = true,
title=title,
xlab=xlab,
ylab=ylab
)
ggstatsplot::ggcoefstats(
x = logit.model,
statistic = 'z',
##exponentiate = true,
title=title,
xlab=xlab,
ylab=ylab
)
with( trainingdata_2, summary(y1))
x3 <- with( trainingdata_2, summary(y1))
typeof(x3)
plot(x3)
hist(x3)
plot(x3)
# Another attempt at a bar plot
vote_plot <- ggplot( trainingdata_2, aes( x = y2, y = y1 ) ) + geom_boxplot()
vote_plot
# Another attempt at a bar plot
vote_plot <- ggplot( trainingdata_2, aes( x = y2, y = y1 ) ) + geom_boxplot() + coord_flip()
vote_plot
View(some_table)
plot(some_table)
hist(some_table$n, col = "steelblue")
# Will use same logic as above but with a new data frame
voteplot2 <- ggplot( some_table, aes( x = n, y = y1 ) ) + geom_boxplot() + coord_flip()
voteplot2
rlang::last_error()
# Will use same logic as above but with a new data frame
voteplot2 <- ggplot( some_table, aes( x = n, y = y2 ) ) + geom_boxplot() + coord_flip()
voteplot2
# Will use same logic as above but with a new data frame
voteplot2 <- ggplot( some_table, aes( x = n, y = y2 ) )
voteplot2
# Will use same logic as above but with a new data frame
voteplot2 <- ggplot( some_table, aes( x = n, y = y2 ) ) + geom_bar()
voteplot2
# Will use same logic as above but with a new data frame
voteplot2 <- ggplot( some_table, aes( x = n, y = y2 ) ) + geom_boxplot()
voteplot2
voteplot2
head(some_table)
head(some_table$n)
View(logit.model)
